"""
Generates an HTML which allows any user to run the task.
"""
import numpy as np
from tqdm import tqdm
import ptap_writer.utils as utils
from typing import List
import os
from typing import Union, Dict, List
import json

TEMPLATE_LOCATION = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'mts_task_template.html')
assert os.path.exists(TEMPLATE_LOCATION), 'Could not find template at %s' % (TEMPLATE_LOCATION)

TASK_LOCATION = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'mts_task.js')
assert os.path.exists(TASK_LOCATION), 'Could not find task at %s' % (TASK_LOCATION)

bool2jsbool = lambda b: 'true' if b else 'false'


class MatchPool(object):
    """
    A pool of trials given by

    category_manifest = {category: stimulus_urls}
    token_manifest = {category: token_urls}

    Trials are generated by randomly sampling
        1) A category
        2) A stimulus belonging to that category
        3) A token belonging to that category
        4) A token belonging to any other category
    """
    def __init__(self):
        return

    def transpile(self):
        info = {
            'ntrials': 5,
            'image_url_prefix': 'https://milresources.s3.amazonaws.com/Images/AbstractShapes/',
            'image_url_suffixes': ['bluediamond.png', 'orangediamond.png'],
            'trial_pool': [
                {'i_stm': 0, 'i_c0': 0, 'i_c1': 1, 'l': 0},
                {'i_stm': 1, 'i_c0': 0, 'i_c1': 1, 'l': 1},
            ],
            'stimulus_duration_msec': 200,
            'reward_duration_msec': 50,
            'punish_duration_msec': 500,
            'choice_duration_msec': 5000,
            'minimal_choice_duration_msec': 500,
            'post_stimulus_delay_duration_msec': 0,
            'usd_upon_block_completion': 0.5,
            'block_name': 'test_mil',
            'continue_perf_criterion': 1,
        }

        return info

def normalize_urls(url_list,):
    prefix = os.path.commonprefix(url_list)
    suffixes = [os.path.split(url)[-1] for url in url_list]
    return prefix, suffixes


class AllWayPool(object):
    """

    A pool of trials defined by a set of stimuli, and a set of tokens.
    Any given trial is given by a random stimulus choice, and 2 random tokens (selected without replacement).
    No reinforcement is given.
    """
    def __init__(
            self,
            stimulus_urls: List[str],
            token_urls: List[str],
    ):

        self.url_prefix = os.path.commonprefix(stimulus_urls + token_urls)
        self.stimulus_suffixes = [os.path.split(url)[-1] for url in stimulus_urls]
        self.token_suffixes = [os.path.split(url)[-1] for url in token_urls]

        # Assemble trial_pool using a JavaScript call
        # Build iterator function
        stim_suffixes_string = json.dumps(self.stimulus_suffixes)
        token_suffixes = json.dumps(self.token_suffixes)
        function_string = '(function* trial_generator(){\n'
        function_string +='const stim_suffixes=%s;\n'%(stim_suffixes_string)
        function_string +='let token_suffixes=%s;\n'%(token_suffixes)
        function_string +='while(true){\n'
        function_string +='const cur_stim_suffix=stim_suffixes[Math.floor(Math.random() * stim_suffixes.length)];\n'
        function_string +='const choices=MathUtils.permute(token_suffixes);\n'
        function_string += 'const cur_c0_suffix = choices[0];\n'
        function_string += 'const cur_c1_suffix = choices[1];\n'
        function_string +="yield {'stimulus_url_suffix':cur_stim_suffix, 'choice0_url_suffix':cur_c0_suffix, 'choice1_url_suffix':cur_c1_suffix, 'rewarded_choice':-1}"
        function_string +='}})'
        self.function_string = function_string
        return

    def get_string(self):
        info ={
                'ntrials':5,
                'image_url_prefix':'https://milresources.s3.amazonaws.com/Images/AbstractShapes/',
                'stimulus_duration_msec':200,
                'reward_duration_msec':50,
                'punish_duration_msec':500,
                'choice_duration_msec':5000,
                'minimal_choice_duration_msec':500,
                'post_stimulus_delay_duration_msec':0,
                'usd_upon_block_completion':0.5,
                'block_name':'test_mil',
                'continue_perf_criterion':1,
            }

        javascript_expression = '{'
        for k in info:
            if isinstance(info[k], str):
                val = f'"{info[k]}"'
            else:
                val = info[k]
            javascript_expression+=f'"{k}":{val},\n'
        javascript_expression+=f'"trial_pool":{self.function_string},\n'
        javascript_expression+='}'

        return javascript_expression

if __name__ == '__main__':
    blue = 'https://milresources.s3.amazonaws.com/Images/AbstractShapes/bluediamond.png'
    orange = 'https://milresources.s3.amazonaws.com/Images/AbstractShapes/orangediamond.png'
    pool = AllWayPool(stimulus_urls=[blue, orange], token_urls=[blue, orange])
    x = pool.get_string()

    # Load template
    html_string = utils.load_text(TEMPLATE_LOCATION)
    html_string = html_string.replace("__TEST_INSERT__", x)
    # Load ptap/public/common/*.js files into a string
    javascript_common = utils.make_javascript_common_injection_string()

    # Load the task definition into a string
    javascript_task = utils.load_text(TASK_LOCATION)

    # Join the strings
    javascript_injection = '\n\n\n\n'.join([javascript_common, javascript_task])
    html_string = html_string.replace('__INJECT_JAVASCRIPT_HERE__', javascript_injection)
    utils.save_text(string=html_string, fpath = './orange_blue_example.html')